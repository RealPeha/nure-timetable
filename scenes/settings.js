const Scene    = require('telegraf/scenes/base'),
      Keyboard = require('../utils/keyboard'),
      User     = require('../utils/user'),
      Update   = require('../utils/update'),
      Schedule = require('../utils/schedule'),
      Fun      = require('../utils/forfun'),
      Group    = require('../utils/groups')

module.exports = new Scene('settings')
.enter(async (ctx) => {
    let keyboard = Keyboard.new(['–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', '–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ']).add(['–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø'], 1)
    const user = ctx.session.user
    let groups = user.group
    //let text = `üîé <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:</b> ${user.group}\nüîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${(user.notify ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã')}`
    let text = `üîé <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:</b> ${groups.join(', ')}\n`
    let lastUpdateText = []
    for (let i = 0; i < groups.length; i++) {
        const lastUpdate = await Update.get(groups[i])
        if (lastUpdate) {
            lastUpdateText.push(`${lastUpdate.date} –≤ ${lastUpdate.time}`)
        } else {
            lastUpdateText.push(`–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`)
        }
    }
    if (lastUpdateText.length) {
        text += `üíæ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> ${lastUpdateText.join(', ')}\n`
    } else {
        text += `üíæ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n`
    }
    //–ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Ö –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    /*if (user.notify) {
        keyboard.add(['–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è'], 1)
        text += `\n‚è∞ <b>–í—Ä–µ–º—è:</b> ${user.time}`
    } else {
        keyboard.add(['–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'], 1)
    }
    keyboard.add(['–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ'], 2)*/
    ctx.replyWithHTML(text, keyboard.add(['–ù–∞–∑–∞–¥'], 2/*3*/).draw())
    ctx.session.keyboard = keyboard
})
.hears('–ù–∞–∑–∞–¥', ({ scene }) => {
    scene.enter('menu')
})
.hears('–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', ({ scene }) => {
    scene.enter('select')
})
.hears('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø', ({ scene }) => {
    scene.enter('join')
})
/*.hears('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async (ctx) => {
    let keyboard = ctx.session.keyboard
    const id   = ctx.message.from.id,
          user = ctx.session.user
    //–ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    user.notify = true
    user.time = 10
    await User.update(id, user)//–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
    ctx.scene.enter('settings')
})*/
.hears('–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ', async (ctx) => {
    await ctx.replyWithHTML(`<b>–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...</b>\n\n<b>–ù–∞ –∑–∞–º–µ—Ç–∫—É:</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–µ. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –¥–æ –≤–∞—Å —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª —ç—Ç—É –≥—Ä—É–ø–ø—É, —Ç–æ –≤–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—É–Ω–∫—Ç "–û–±–Ω–æ–≤–ª–µ–Ω–æ" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –µ—Å–ª–∏ —Ç–∞–º —Å—Ç–æ–∏—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, —Ç–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ—Ç—É —Å–º—ã—Å–ª–∞`, Keyboard.new().clear())
    ctx.replyWithHTML(`<i>${Fun.load()}</i>`)
    await Schedule.update(ctx.session.user)
    ctx.scene.enter('settings')
})
/*.hears('–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async (ctx) => {
    let keyboard = ctx.session.keyboard
    const id   = ctx.message.from.id,
          user = ctx.session.user
    
    //–ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    user.notify = false
    user.time = 0
    await User.update(id, user) //–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
    ctx.scene.enter('settings')
})
.hears('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è', (ctx) => {
    ctx.scene.enter('set-time')
})*/